generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  description          String         @default("")
  enabledNotifications Boolean        @default(true)
  image                String?
  password             String?
  accounts             Account[]
  books                Book[]
  chatsAsUser1         Chat[]         @relation("User1Chats")
  chatsAsUser2         Chat[]         @relation("User2Chats")
  messages             Message[]
  notifications        Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Book {
  id              String       @id @default(cuid())
  title           String
  author          String
  description     String?
  publicationYear Int?
  publisher       String?
  coverImage      String?
  category        BookCategory
  userId          String?
  User            User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id       String    @id @default(cuid())
  user1Id  String
  user2Id  String
  user1    User      @relation("User1Chats", fields: [user1Id], references: [id])
  user2    User      @relation("User2Chats", fields: [user2Id], references: [id])
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())
  senderId  String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  isReaded  Boolean
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum BookCategory {
  LOOKING_FOR
  EXCHANGING
}
